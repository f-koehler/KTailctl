name: CI
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main
jobs:
  cpplinting:
    name: "C++ Linting: ${{ matrix.check.script }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        check:
          - script: cppcheck
            dependencies: "cppcheck"
          - script: flawfinder
            dependencies: "flawfinder"
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup nix.
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Run ${{ matrix.check.script }}.
        run: nix-shell -p ${{ matrix.check.dependencies }} --run "./scripts/${{ matrix.check.script }}.sh"
  golinting:
    name: "Go Linting: ${{ matrix.script }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        script:
          - gocritic
          - gofmt
          - gofumpt
          - goimports
          - goreturns
          - gosec
          - gostaticcheck
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup go.
        uses: actions/setup-go@v5.0.1
        with:
          go-version: "stable"
      - name: Add KDE Neon apt repo.
        run: sudo ./scripts/add-neon-apt-repo.sh
      - name: Install dependencies.
        run: sudo ./scripts/neon-deps.sh
      - name: Configure CMake project.
        run: cmake -B build
      - name: Run ${{ matrix.script }}.
        run: ./scripts/${{ matrix.script }}.sh
  qmllinting:
    name: QML Analysis & Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Add KDE Neon apt repo.
        run: sudo ./scripts/add-neon-apt-repo.sh
      - name: Install dependencies.
        run: sudo ./scripts/neon-deps.sh
      - name: Install QML dev tools.
        run: sudo apt install -y qt6-declarative-dev
      - name: Lint QML files.
        run: find ./src -type f -name "*.qml" -exec /usr/lib/qt6/bin/qmllint "{}" \;
      - name: Format QML files.
        run: find ./src -type f -name "*.qml" -exec /usr/lib/qt6/bin/qmlformat --inplace "{}" \;
  build:
    name: "LLVM build: Version ${{ matrix.llvm_version }}"
    runs-on: ubuntu-latest
    needs:
      - qmllinting
      - golinting
      - cpplinting
    strategy:
      fail-fast: false
      matrix:
        llvm_version: [15, 16, 17, 18]
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup go.
        uses: actions/setup-go@v5.0.1
        with:
          go-version: "stable"
          cache-dependency-path: tailwrap/go.sum
      - name: Vendor go dependencies.
        run: go mod vendor
        working-directory: tailwrap
      - name: Add KDE Neon apt repo.
        run: sudo ./scripts/add-neon-apt-repo.sh
      - name: Install dependencies.
        run: sudo ./scripts/neon-deps.sh
      - name: Add LLVM apt key.
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      - name: Add LLVM repo.
        run: sudo add-apt-repository -y "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-${{ matrix.llvm_version }} main"
      - name: Install clang.
        run: sudo apt install -y clang-${{ matrix.llvm_version }}
      - name: Configure CMake project.
        run: CC=clang-${{ matrix.llvm_version }} CXX=clang++-${{ matrix.llvm_version }} cmake -B build
      - name: Build CMake project.
        run: cmake --build build
  flatpak_build:
    name: Flatpak build
    runs-on: ubuntu-latest
    needs:
      - qmllinting
      - golinting
      - cpplinting
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Update apt cache.
        run: sudo apt-get update -yq
      - name: Install flatpak-builder.
        run: sudo apt-get install -yq flatpak-builder flatpak
      - name: Install flatpak dependencies.
        run: ./scripts/flatpak-deps.sh
      - name: Validate manifest.
        run: flatpak run --command=flatpak-builder-lint org.flatpak.Builder manifest org.fkoehler.KTailctl.yml
      - name: Check external data.
        run: flatpak run org.flathub.flatpak-external-data-checker --check-outdated org.fkoehler.KTailctl.yml
      - name: Setup go.
        uses: actions/setup-go@v5.0.1
        with:
          go-version: "stable"
      - name: Vendor go dependencies.
        run: go mod vendor
        working-directory: tailwrap
      - name: Build.
        run: flatpak-builder --user --force-clean build-dir org.fkoehler.KTailctl.yml
      - name: Validate build.
        run: flatpak run --command=flatpak-builder-lint org.flatpak.Builder builddir build-dir/
  appimage_build:
    name: AppImage build
    runs-on: ubuntu-latest
    needs:
      - qmllinting
      - golinting
      - cpplinting
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup go.
        uses: actions/setup-go@v5.0.1
        with:
          go-version: "stable"
          cache-dependency-path: tailwrap/go.sum
      - name: Vendor go dependencies.
        run: go mod vendor
        working-directory: tailwrap
      - name: Add KDE Neon apt repo.
        run: sudo ./scripts/add-neon-apt-repo.sh
      - name: Install dependencies.
        run: sudo ./scripts/neon-deps.sh
      - name: Add LLVM apt key.
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      - name: Add LLVM repo.
        run: sudo add-apt-repository -y "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
      - name: Install clang.
        run: sudo apt install -y clang-18
      - name: Get appimage-builder.
        working-directory: AppImage
        run: wget -O appimage-builder https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
      - name: Make appimage-builder executable.
        working-directory: AppImage
        run: chmod +x appimage-builder
      - name: Build AppImage.
        working-directory: AppImage
        run: CC=clang-18 CXX=clang++-18 ./build.sh
  nix_build:
    name: Nix build
    runs-on: ubuntu-latest
    needs:
      - qmllinting
      - golinting
      - cpplinting
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Vendor go dependencies.
        run: nix-shell -p go --command "go mod vendor"
        working-directory: tailwrap
      - name: Build with nix
        run: nix build .
  create_release:
    if: startsWith(github.event.ref, 'refs/tags/v')
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - build
      - flatpak_build
      - appimage_build
    permissions:
      contents: write
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup go.
        uses: actions/setup-go@v5.0.1
        with:
          go-version: "stable"
          cache-dependency-path: tailwrap/go.sum
      - name: Add KDE Neon apt repo.
        run: sudo ./scripts/add-neon-apt-repo.sh
      - name: Install dependencies.
        run: sudo ./scripts/neon-deps.sh
      - name: Install GH CLI.
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: Install yq.
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &&\
          sudo chmod +x /usr/bin/yq
      - name: Add LLVM apt key.
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      - name: Add LLVM repo.
        run: sudo add-apt-repository -y "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
      - name: Install clang.
        run: sudo apt install -y clang-18 llvm-18-dev
      - name: Get appimage-builder.
        working-directory: AppImage
        run: wget -O appimage-builder https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
      - name: Make appimage-builder executable.
        working-directory: AppImage
        run: chmod +x appimage-builder
      - name: Create release.
        run: ./scripts/create-release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
